        -:    0:Source:/mnt/c/Users/thoma/Documents/COURS/Fac/L2/Projet Tech/TD8/07B/game_test_ecallet.c
        -:    0:Graph:/mnt/c/Users/thoma/Documents/COURS/Fac/L2/Projet Tech/TD8/07B/build/CMakeFiles/game_test_ecallet.dir/game_test_ecallet.c.gcno
        -:    0:Data:/mnt/c/Users/thoma/Documents/COURS/Fac/L2/Projet Tech/TD8/07B/build/CMakeFiles/game_test_ecallet.dir/game_test_ecallet.c.gcda
        -:    0:Runs:91
        -:    1:#include <stdbool.h>
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <string.h>
        -:    5:
        -:    6:#include "game.h"
        -:    7:#include "game_aux.h"
        -:    8:#include "game_struct.h"
        -:    9:
        -:   10:/* ********** ASSERT ********** */
        -:   11:#define ASSERT(expr)                                                          \
        -:   12:  do {                                                                        \
        -:   13:    if ((expr) == 0) {                                                        \
        -:   14:      fprintf(stderr, "[%s:%d] Assertion '%s' failed!\n", __FILE__, __LINE__, \
        -:   15:              #expr);                                                         \
        -:   16:      abort();                                                                \
        -:   17:    }                                                                         \
        -:   18:  } while (0)
        -:   19:
        -:   20:/* Create a test game 3x3 with wanted parameters */
       48:   21:game set_game_test(bool wrapping, bool unique) {
       48:   22:  game g = game_new_empty_ext(4, 4, wrapping, unique);
       48:   23:  game_set_square(g, 0, 0, S_IMMUTABLE_ZERO);
       48:   24:  game_set_square(g, 0, 3, S_IMMUTABLE_ONE);
       48:   25:  game_set_square(g, 3, 0, S_ZERO);
       48:   26:  game_set_square(g, 3, 3, S_ONE);
       48:   27:  return (g);
        -:   28:}
        -:   29:/* *** TEST DUMMY *** */
        6:   30:int test_dummy() { return 0; }
        -:   31:
        -:   32:/* *** TEST GET NUMBER *** */
        6:   33:int test_get_number() {
        6:   34:  game g = game_default();
        6:   35:  square s = S_ZERO;
        6:   36:  game_play_move(g, 0, 0, s);
        6:   37:  s = S_ONE;
        6:   38:  game_play_move(g, 0, 3, s);
       12:   39:  if (game_get_number(g, 0, 0) != 0 || game_get_number(g, 0, 1) != 1 ||
       18:   40:      game_get_number(g, 0, 2) != 0 || game_get_number(g, 0, 3) != 1 ||
        6:   41:      game_get_number(g, 0, 4) != -1) {
    #####:   42:    game_delete(g);
    #####:   43:    return 1;
        -:   44:  } else {
        6:   45:    game_delete(g);
        6:   46:    return 0;
        -:   47:  }
        -:   48:}
        -:   49:
        -:   50:/* *** TEST GET NEXT SQUARE *** */
        6:   51:int test_get_next_square() {
        6:   52:  game g = set_game_test(false, false);
       12:   53:  if (game_get_next_square(g, 0, 0, RIGHT, 0) != S_IMMUTABLE_ZERO ||
       12:   54:      game_get_next_square(g, 0, 2, LEFT, 0) != S_EMPTY ||
       12:   55:      game_get_next_square(g, 2, 3, UP, 2) != S_IMMUTABLE_ONE ||
       12:   56:      game_get_next_square(g, 3, 0, DOWN, 2) != -1 ||
       12:   57:      game_get_next_square(g, 0, 2, UP, 1) != -1 ||
       12:   58:      game_get_next_square(g, 3, 0, LEFT, 2) != -1 ||
        6:   59:      game_get_next_square(g, 3, 3, RIGHT, 1) != -1) {
    #####:   60:    game_delete(g);
    #####:   61:    return -1;
        -:   62:  }
        6:   63:  game_delete(g);
        6:   64:  return 0;
        -:   65:}
        -:   66:
        -:   67:/* *** TEST GET NEXT SQUARE *** */
        6:   68:int test_get_next_square_wrapping() {
        6:   69:  game g = set_game_test(true, false);
       12:   70:  if (game_get_next_square(g, 0, 0, RIGHT, 0) != S_IMMUTABLE_ZERO ||
       12:   71:      game_get_next_square(g, 0, 2, LEFT, 0) != S_EMPTY ||
       12:   72:      game_get_next_square(g, 2, 3, UP, 2) != S_IMMUTABLE_ONE ||
       12:   73:      game_get_next_square(g, 3, 0, DOWN, 2) != S_EMPTY ||
       12:   74:      game_get_next_square(g, 3, 0, DOWN, 1) != S_IMMUTABLE_ZERO ||
       12:   75:      game_get_next_square(g, 0, 0, UP, 1) != S_ZERO ||
       12:   76:      game_get_next_square(g, 0, 2, UP, 1) != S_EMPTY ||
       12:   77:      game_get_next_square(g, 0, 3, UP, 1) != S_ONE ||
       12:   78:      game_get_next_square(g, 0, 0, LEFT, 1) != S_IMMUTABLE_ONE ||
       12:   79:      game_get_next_square(g, 1, 0, LEFT, 1) != S_EMPTY ||
       12:   80:      game_get_next_square(g, 1, 3, RIGHT, 1) != S_EMPTY ||
        6:   81:      game_get_next_square(g, 3, 3, RIGHT, 1) != S_ZERO) {
    #####:   82:    game_delete(g);
    #####:   83:    return 1;
        -:   84:  }
        6:   85:  game_delete(g);
        6:   86:  return 0;
        -:   87:}
        -:   88:
        -:   89:/* *** TEST CHECK MOVE *** */
        6:   90:int test_check_move() {
        6:   91:  game g = game_default();
        -:   92:
        6:   93:  if (game_check_move(g, 7, 8, S_ONE) != false ||
        6:   94:      game_check_move(g, 0, 0, S_ZERO) != true ||
        6:   95:      game_check_move(g, 0, 0, S_ONE) != true ||
       12:   96:      game_check_move(g, 0, 0, S_EMPTY) != true ||
       12:   97:      game_check_move(g, 0, 1, S_ONE) != false ||
       12:   98:      game_check_move(g, 0, 2, S_ZERO) != false ||
       12:   99:      game_check_move(g, 0, 0, S_IMMUTABLE_ONE) != false ||
        6:  100:      game_check_move(g, 0, 1, S_IMMUTABLE_ZERO) != false) {
    #####:  101:    game_delete(g);
    #####:  102:    return 1;
        -:  103:  } else {
        6:  104:    game_delete(g);
        6:  105:    return 0;
        -:  106:  }
        -:  107:}
        -:  108:
        -:  109:/* *** TEST GET NEXT NUMBER *** */
        6:  110:int test_get_next_number() {
        6:  111:  game g = set_game_test(false, false);
       12:  112:  if (game_get_next_number(g, 0, 0, RIGHT, 0) != 0 ||
       12:  113:      game_get_next_number(g, 0, 2, LEFT, 0) != -1 ||
       12:  114:      game_get_next_number(g, 2, 3, UP, 2) != 1 ||
       12:  115:      game_get_next_number(g, 3, 0, DOWN, 2) != -1 ||
        6:  116:      game_get_next_number(g, 0, 2, UP, 1) != -1) {
    #####:  117:    game_delete(g);
    #####:  118:    return 1;
        -:  119:  }
        6:  120:  game_delete(g);
        6:  121:  return 0;
        -:  122:}
        -:  123:
        -:  124:/* *** TEST GET NEXT NUMBER WRAPPING *** */
        6:  125:int test_get_next_number_wrapping() {
        6:  126:  game g = set_game_test(true, false);
       12:  127:  if (game_get_next_number(g, 0, 0, RIGHT, 0) != 0 ||
       12:  128:      game_get_next_number(g, 0, 2, LEFT, 0) != -1 ||
       12:  129:      game_get_next_number(g, 2, 3, UP, 2) != 1 ||
       12:  130:      game_get_next_number(g, 3, 0, DOWN, 2) != -1 ||
       12:  131:      game_get_next_number(g, 3, 0, DOWN, 1) != 0 ||
       12:  132:      game_get_next_number(g, 0, 2, UP, 1) != -1 ||
       12:  133:      game_get_next_number(g, 0, 3, UP, 1) != 1 ||
       12:  134:      game_get_next_number(g, 0, 0, LEFT, 1) != 1 ||
       12:  135:      game_get_next_number(g, 1, 0, LEFT, 1) != -1 ||
       12:  136:      game_get_next_number(g, 1, 3, RIGHT, 1) != -1 ||
        6:  137:      game_get_next_number(g, 3, 3, RIGHT, 1) != 0) {
    #####:  138:    game_delete(g);
    #####:  139:    return 1;
        -:  140:  }
        6:  141:  game_delete(g);
        6:  142:  return 0;
        -:  143:}
        -:  144:
        -:  145:/* *** TEST IS EMPTY *** */
        6:  146:int test_is_empty() {
        6:  147:  game g = game_default();
        6:  148:  square s = S_ZERO;
        6:  149:  game_play_move(g, 0, 0, s);
        6:  150:  s = S_ONE;
        6:  151:  game_play_move(g, 0, 3, s);
       12:  152:  if (game_is_empty(g, 0, 0) != false || game_is_empty(g, 0, 1) != false ||
       12:  153:      game_is_empty(g, 0, 2) != false || game_is_empty(g, 0, 3) != false ||
        6:  154:      game_is_empty(g, 0, 4) != true) {
    #####:  155:    game_delete(g);
    #####:  156:    return 1;
        -:  157:  } else {
        6:  158:    game_delete(g);
        6:  159:    return 0;
        -:  160:  }
        -:  161:}
        -:  162:
        -:  163:/* *** TEST IS IMMUTABLE *** */
        6:  164:int test_is_immutable() {
        6:  165:  game g = game_default();
        6:  166:  square s = S_ZERO;
        6:  167:  game_play_move(g, 0, 0, s);
        6:  168:  s = S_ONE;
        6:  169:  game_play_move(g, 0, 3, s);
        6:  170:  if (game_is_immutable(g, 0, 0) != false ||
        6:  171:      game_is_immutable(g, 0, 1) != true ||
       12:  172:      game_is_immutable(g, 0, 2) != true ||
       12:  173:      game_is_immutable(g, 0, 3) != false ||
        6:  174:      game_is_immutable(g, 0, 4) != false) {
    #####:  175:    game_delete(g);
    #####:  176:    return 1;
        -:  177:  } else {
        6:  178:    game_delete(g);
        6:  179:    return 0;
        -:  180:  }
        -:  181:}
        -:  182:
        -:  183:/* *** TEST HAS ERROR *** */
        6:  184:int test_has_error() {
        6:  185:  game g = game_default();
        6:  186:  game_play_move(g, 1, 1, S_ZERO);
        6:  187:  game_play_move(g, 5, 2, S_ONE);
        6:  188:  game_play_move(g, 0, 3, S_ZERO);
        6:  189:  game_play_move(g, 0, 4, S_ZERO);
       12:  190:  if (game_has_error(g, 0, 0) != 0 || game_has_error(g, 0, 1) != 0 ||
       18:  191:      game_has_error(g, 1, 1) == 0 || game_has_error(g, 5, 2) == 0 ||
       12:  192:      game_has_error(g, 0, 3) == 0 || game_has_error(g, 0, 4) == 0) {
    #####:  193:    game_delete(g);
    #####:  194:    return 1;
        -:  195:  }
        6:  196:  game_delete(g);
        6:  197:  square test[32] = {S_ZERO, S_ZERO, S_ONE,  S_ONE, S_ZERO, S_ONE,  S_ONE,
        -:  198:                     S_ZERO, S_ZERO, S_ZERO, S_ONE, S_ONE,  S_ZERO, S_ONE,
        -:  199:                     S_ONE,  S_ZERO, S_ONE,  S_ONE, S_ZERO, S_ZERO, S_ONE,
        -:  200:                     S_ZERO, S_ZERO, S_ONE,  S_ONE, S_ONE,  S_ZERO, S_ZERO,
        -:  201:                     S_ONE,  S_ZERO, S_ZERO, S_ONE};
        6:  202:  game g2 = game_new_ext(4, 8, test, false, true);
        6:  203:  if (game_has_error(g2, 1, 0) == false) {
    #####:  204:    game_delete(g2);
    #####:  205:    return 1;
        -:  206:  }
        6:  207:  game_delete(g2);
        6:  208:  return 0;
        -:  209:}
        -:  210:
        -:  211:/* *** TEST HAS ERROR WRAPPING*** */
        6:  212:int test_has_error_wrapping() {
        6:  213:  game g = set_game_test(true, false);
        6:  214:  game_play_move(g, 1, 0, S_ZERO);  // W   w B
        6:  215:  game_play_move(g, 1, 3, S_ZERO);  // w
        6:  216:  game_play_move(g, 0, 2, S_ZERO);  //       b
        6:  217:  game_play_move(g, 3, 2, S_ZERO);  // w b w b
        6:  218:  game_play_move(g, 2, 3, S_ONE);
        6:  219:  game_play_move(g, 3, 1, S_ONE);
       12:  220:  if (game_has_error(g, 0, 0) != -1 || game_has_error(g, 1, 0) != -1 ||
       18:  221:      game_has_error(g, 3, 0) != -1 || game_has_error(g, 2, 3) != -1 ||
       18:  222:      game_has_error(g, 3, 3) != -1 || game_has_error(g, 0, 2) != 0 ||
       12:  223:      game_has_error(g, 3, 1) != 0 || game_has_error(g, 3, 2) != 0) {
    #####:  224:    game_delete(g);
    #####:  225:    return 1;
        -:  226:  }                                 // W   w B
        6:  227:  game_play_move(g, 1, 1, S_ZERO);  // w w   w
        6:  228:  game_play_move(g, 1, 3, S_ZERO);  //       b
        -:  229:                                    // b b w b
       12:  230:  if (game_has_error(g, 1, 0) != -1 || game_has_error(g, 1, 1) != -1 ||
       18:  231:      game_has_error(g, 1, 3) != -1 || game_has_error(g, 3, 0) != -1 ||
        6:  232:      game_has_error(g, 3, 3) != -1) {
    #####:  233:    game_delete(g);
    #####:  234:    return 1;
        -:  235:  }
        -:  236:
        6:  237:  game_delete(g);
        6:  238:  return 0;
        -:  239:}
        -:  240:
        -:  241:/* *** TEST HAS ERROR UNIQUE*** */
        6:  242:int test_has_error_unique() {
        6:  243:  game g = game_new_empty_ext(6, 6, false, true);
        6:  244:  game_play_move(g, 0, 0, S_ZERO);
        6:  245:  game_play_move(g, 0, 1, S_ZERO);
        6:  246:  game_play_move(g, 0, 3, S_ZERO);
        6:  247:  game_play_move(g, 0, 4, S_ZERO);
        6:  248:  game_play_move(g, 0, 2, S_ONE);
        6:  249:  game_play_move(g, 1, 2, S_ONE);
        6:  250:  game_play_move(g, 3, 2, S_ONE);
        6:  251:  game_play_move(g, 4, 2, S_ONE);
       12:  252:  if (game_has_error(g, 0, 0) != -1 || game_has_error(g, 0, 1) != -1 ||
       12:  253:      game_has_error(g, 0, 2) != -1 || game_has_error(g, 3, 2) != -1) {
    #####:  254:    game_delete(g);
    #####:  255:    return 1;
        -:  256:  }
        6:  257:  game_delete(g);
        6:  258:  game g_diff_lines = game_new_empty_ext(4, 4, false, true);
        6:  259:  game_play_move(g_diff_lines, 0, 0, S_ZERO);
        6:  260:  game_play_move(g_diff_lines, 0, 2, S_ZERO);
        6:  261:  game_play_move(g_diff_lines, 1, 0, S_ZERO);
        6:  262:  game_play_move(g_diff_lines, 1, 1, S_ZERO);
        6:  263:  game_play_move(g_diff_lines, 2, 1, S_ZERO);
        6:  264:  game_play_move(g_diff_lines, 2, 3, S_ZERO);
        6:  265:  game_play_move(g_diff_lines, 3, 2, S_ZERO);
        6:  266:  game_play_move(g_diff_lines, 3, 3, S_ZERO);
        6:  267:  game_play_move(g_diff_lines, 0, 1, S_ONE);
        6:  268:  game_play_move(g_diff_lines, 0, 3, S_ONE);
        6:  269:  game_play_move(g_diff_lines, 1, 2, S_ONE);
        6:  270:  game_play_move(g_diff_lines, 1, 3, S_ONE);
        6:  271:  game_play_move(g_diff_lines, 2, 0, S_ONE);
        6:  272:  game_play_move(g_diff_lines, 2, 2, S_ONE);
        6:  273:  game_play_move(g_diff_lines, 3, 0, S_ONE);
        6:  274:  game_play_move(g_diff_lines, 3, 1, S_ONE);
        6:  275:  if (game_has_error(g, 0, 0) != 0) {
    #####:  276:    game_delete(g_diff_lines);
    #####:  277:    return -1;
        -:  278:  }
        6:  279:  game_delete(g_diff_lines);
        6:  280:  game g_same_lines = game_new_empty_ext(4, 4, true, true);
        6:  281:  game_play_move(g_same_lines, 0, 1, S_ZERO);
        6:  282:  game_play_move(g_same_lines, 0, 3, S_ZERO);
        6:  283:  game_play_move(g_same_lines, 1, 1, S_ZERO);
        6:  284:  game_play_move(g_same_lines, 1, 3, S_ZERO);
        6:  285:  game_play_move(g_same_lines, 2, 0, S_ZERO);
        6:  286:  game_play_move(g_same_lines, 2, 2, S_ZERO);
        6:  287:  game_play_move(g_same_lines, 3, 0, S_ZERO);
        6:  288:  game_play_move(g_same_lines, 3, 2, S_ZERO);
        6:  289:  game_play_move(g_same_lines, 0, 0, S_ONE);
        6:  290:  game_play_move(g_same_lines, 0, 2, S_ONE);
        6:  291:  game_play_move(g_same_lines, 1, 0, S_ONE);
        6:  292:  game_play_move(g_same_lines, 1, 2, S_ONE);
        6:  293:  game_play_move(g_same_lines, 2, 1, S_ONE);
        6:  294:  game_play_move(g_same_lines, 2, 3, S_ONE);
        6:  295:  game_play_move(g_same_lines, 3, 1, S_ONE);
        6:  296:  game_play_move(g_same_lines, 3, 3, S_ONE);
        6:  297:  if (game_has_error(g, 0, 0) != -1) {
    #####:  298:    game_delete(g_same_lines);
    #####:  299:    return -1;
        -:  300:  }
        -:  301:
        6:  302:  game_delete(g_same_lines);
        6:  303:  return 0;
        -:  304:}
        -:  305:
        -:  306:/* *** TEST UNDO *** */
        6:  307:int test_undo() {
        6:  308:  game g = set_game_test(false, false);
        6:  309:  game g2 = set_game_test(false, false);
        6:  310:  game g3 = set_game_test(false, false);
        6:  311:  game_play_move(g2, 0, 1, S_ONE);
        6:  312:  game_undo(g2);
        6:  313:  game_play_move(g2, 1, 1, S_ZERO);
        6:  314:  game_play_move(g2, 2, 1, S_ONE);
        6:  315:  game_undo(g2);
        6:  316:  game_undo(g2);
        6:  317:  game_redo(g2);
        6:  318:  game_undo(g2);
        6:  319:  game_undo(g);
        6:  320:  if (game_equal(g, g2) == false || game_equal(g, g3) == false) {
    #####:  321:    game_delete(g);
    #####:  322:    game_delete(g2);
    #####:  323:    game_delete(g3);
    #####:  324:    return 1;
        -:  325:  } else {
        6:  326:    game_delete(g);
        6:  327:    game_delete(g2);
        6:  328:    game_delete(g3);
        6:  329:    return 0;
        -:  330:  }
        -:  331:}
        -:  332:
        -:  333:/* *** TEST GAME_NEW_EXT COMME MOODLE *** */
        6:  334:int test_game_new_ext_moodle() {
        6:  335:  square squares[8] = {S_EMPTY, S_IMMUTABLE_ONE,  S_IMMUTABLE_ZERO, S_ONE,
        -:  336:                       S_ZERO,  S_IMMUTABLE_ZERO, S_EMPTY,          S_ONE};
        6:  337:  int nb_rows = 4;
        6:  338:  int nb_cols = 2;
        6:  339:  game g = game_new_ext(4, 2, squares, true, true);
        6:  340:  if (game_is_unique(g) != true || game_is_wrapping(g) != true ||
        6:  341:      game_nb_rows(g) != nb_rows || game_nb_cols(g) != nb_cols) {
    #####:  342:    game_delete(g);
    #####:  343:    return 1;
        -:  344:  }
       30:  345:  for (int i = 0; i < nb_rows; i++) {
       72:  346:    for (int j = 0; j < nb_cols; j++) {
       48:  347:      if (game_get_square(g, i, j) != squares[i * nb_cols + j]) {
    #####:  348:        game_delete(g);
    #####:  349:        return 1;
        -:  350:      }
        -:  351:    }
        -:  352:  }
        6:  353:  game_delete(g);
        6:  354:  return 0;
        -:  355:}
        -:  356:
        -:  357:/* *** TEST IS OVER UNIQUE *** */
        6:  358:int test_is_over_unique() {
        6:  359:  game g_diff_lines = game_new_empty_ext(4, 4, false, true);
        6:  360:  game_play_move(g_diff_lines, 0, 0, S_ZERO);
        6:  361:  game_play_move(g_diff_lines, 0, 2, S_ZERO);
        6:  362:  game_play_move(g_diff_lines, 1, 0, S_ZERO);
        6:  363:  game_play_move(g_diff_lines, 1, 1, S_ZERO);
        6:  364:  game_play_move(g_diff_lines, 2, 1, S_ZERO);
        6:  365:  game_play_move(g_diff_lines, 2, 3, S_ZERO);
        6:  366:  game_play_move(g_diff_lines, 3, 2, S_ZERO);
        6:  367:  game_play_move(g_diff_lines, 3, 3, S_ZERO);
        6:  368:  game_play_move(g_diff_lines, 0, 1, S_ONE);
        6:  369:  game_play_move(g_diff_lines, 0, 3, S_ONE);
        6:  370:  game_play_move(g_diff_lines, 1, 2, S_ONE);
        6:  371:  game_play_move(g_diff_lines, 1, 3, S_ONE);
        6:  372:  game_play_move(g_diff_lines, 2, 0, S_ONE);
        6:  373:  game_play_move(g_diff_lines, 2, 2, S_ONE);
        6:  374:  game_play_move(g_diff_lines, 3, 0, S_ONE);
        6:  375:  game_play_move(g_diff_lines, 3, 1, S_ONE);
        6:  376:  if (game_is_over(g_diff_lines) == false) {
    #####:  377:    game_delete(g_diff_lines);
    #####:  378:    return 1;
        -:  379:  }
        6:  380:  game g_same_lines = game_new_empty_ext(4, 4, true, true);
        6:  381:  game_play_move(g_same_lines, 0, 1, S_ZERO);
        6:  382:  game_play_move(g_same_lines, 0, 3, S_ZERO);
        6:  383:  game_play_move(g_same_lines, 1, 1, S_ZERO);
        6:  384:  game_play_move(g_same_lines, 1, 3, S_ZERO);
        6:  385:  game_play_move(g_same_lines, 2, 0, S_ZERO);
        6:  386:  game_play_move(g_same_lines, 2, 2, S_ZERO);
        6:  387:  game_play_move(g_same_lines, 3, 0, S_ZERO);
        6:  388:  game_play_move(g_same_lines, 3, 2, S_ZERO);
        6:  389:  game_play_move(g_same_lines, 0, 0, S_ONE);
        6:  390:  game_play_move(g_same_lines, 0, 2, S_ONE);
        6:  391:  game_play_move(g_same_lines, 1, 0, S_ONE);
        6:  392:  game_play_move(g_same_lines, 1, 2, S_ONE);
        6:  393:  game_play_move(g_same_lines, 2, 1, S_ONE);
        6:  394:  game_play_move(g_same_lines, 2, 3, S_ONE);
        6:  395:  game_play_move(g_same_lines, 3, 1, S_ONE);
        6:  396:  game_play_move(g_same_lines, 3, 3, S_ONE);
        6:  397:  if (game_is_over(g_same_lines)) {
    #####:  398:    game_delete(g_diff_lines);
    #####:  399:    game_delete(g_same_lines);
    #####:  400:    return 1;
        -:  401:  }
        6:  402:  game_delete(g_diff_lines);
        6:  403:  game_delete(g_same_lines);
        6:  404:  return 0;
        -:  405:}
        -:  406:
        -:  407:/* ********** USAGE ********** */
        -:  408:
        1:  409:void usage(int argc, char *argv[]) {
        1:  410:  fprintf(stderr, "Usage: %s <testname> [<...>]\n", argv[0]);
        1:  411:  exit(EXIT_FAILURE);
        -:  412:}
        -:  413:
        -:  414:/* ********** MAIN ROUTINE ********** */
        -:  415:
       91:  416:int main(int argc, char *argv[]) {
       91:  417:  if (argc == 1) usage(argc, argv);
        -:  418:
        -:  419:  // start test
       90:  420:  fprintf(stderr, "=> Start test \"%s\"\n", argv[1]);
       90:  421:  int ok = 1;
       90:  422:  if (strcmp("dummy", argv[1]) == 0) {
        6:  423:    ok = test_dummy();
        -:  424:  }
       90:  425:  if (strcmp("get_number", argv[1]) == 0) {
        6:  426:    ok = test_get_number();
        -:  427:  }
       90:  428:  if (strcmp("get_next_square", argv[1]) == 0) {
        6:  429:    ok = test_get_next_square();
        -:  430:  }
       90:  431:  if (strcmp("get_next_square_wrapping", argv[1]) == 0) {
        6:  432:    ok = test_get_next_square_wrapping();
        -:  433:  }
       90:  434:  if (strcmp("check_move", argv[1]) == 0) {
        6:  435:    ok = test_check_move();
        -:  436:  }
       90:  437:  if (strcmp("get_next_number", argv[1]) == 0) {
        6:  438:    ok = test_get_next_number();
        -:  439:  }
       90:  440:  if (strcmp("get_next_number_wrapping", argv[1]) == 0) {
        6:  441:    ok = test_get_next_number_wrapping();
        -:  442:  }
       90:  443:  if (strcmp("is_empty", argv[1]) == 0) {
        6:  444:    ok = test_is_empty();
        -:  445:  }
       90:  446:  if (strcmp("is_immutable", argv[1]) == 0) {
        6:  447:    ok = test_is_immutable();
        -:  448:  }
       90:  449:  if (strcmp("has_error", argv[1]) == 0) {
        6:  450:    ok = test_has_error();
        -:  451:  }
       90:  452:  if (strcmp("has_error_wrapping", argv[1]) == 0) {
        6:  453:    ok = test_has_error_wrapping();
        -:  454:  }
       90:  455:  if (strcmp("has_error_unique", argv[1]) == 0) {
        6:  456:    ok = test_has_error_unique();
        -:  457:  }
       90:  458:  if (strcmp("undo", argv[1]) == 0) {
        6:  459:    ok = test_undo();
        -:  460:  }
       90:  461:  if (strcmp("game_new_ext_moodle", argv[1]) == 0) {
        6:  462:    ok = test_game_new_ext_moodle();
        -:  463:  }
       90:  464:  if (strcmp("is_over_unique", argv[1]) == 0) {
        6:  465:    ok = test_is_over_unique();
        -:  466:  }
        -:  467:
       90:  468:  if (ok == 0) {
       90:  469:    fprintf(stderr, "Test \"%s\" finished: SUCCESS\n", argv[1]);
       90:  470:    return EXIT_SUCCESS;
        -:  471:  }
        -:  472:
        -:  473:  else {
    #####:  474:    fprintf(stderr, "Test \"%s\" finished: FAILURE\n", argv[1]);
    #####:  475:    return EXIT_FAILURE;
        -:  476:  }
        -:  477:}
