        -:    0:Source:/mnt/c/Users/thoma/Documents/COURS/Fac/L2/Projet Tech/TD8/07B/game_test_pdinghin.c
        -:    0:Graph:/mnt/c/Users/thoma/Documents/COURS/Fac/L2/Projet Tech/TD8/07B/build/CMakeFiles/game_test_pdinghin.dir/game_test_pdinghin.c.gcno
        -:    0:Data:/mnt/c/Users/thoma/Documents/COURS/Fac/L2/Projet Tech/TD8/07B/build/CMakeFiles/game_test_pdinghin.dir/game_test_pdinghin.c.gcda
        -:    0:Runs:90
        -:    1:#include <assert.h>
        -:    2:#include <stdbool.h>
        -:    3:#include <stdio.h>
        -:    4:#include <stdlib.h>
        -:    5:#include <string.h>
        -:    6:
        -:    7:#include "game_struct.h"
        -:    8:
        -:    9:/*tester les entr√©es seulement sur game_check_move*/
    #####:   10:void usage(int argc, char *argv[]) {
    #####:   11:  fprintf(stderr, "Usage: %s <testname> [<...>]\n", argv[0]);
    #####:   12:  exit(EXIT_FAILURE);
        -:   13:}
        -:   14:
        -:   15:/*Test function game_new*/
        6:   16:int test_game_new() {
        6:   17:  int size = DEFAULT_SIZE * DEFAULT_SIZE;
        6:   18:  square *squares = (square *)malloc(size * sizeof(square));
      222:   19:  for (int i = 0; i < size; i++) {
      216:   20:    squares[i] = S_ONE;
        -:   21:  }
        6:   22:  game g = game_new(squares);
        6:   23:  free(squares);
        6:   24:  if (g == NULL) {
    #####:   25:    return 1;
        -:   26:  }
       42:   27:  for (int i = 0; i < DEFAULT_SIZE; i++) {
      252:   28:    for (int j = 0; j < DEFAULT_SIZE; j++) {
      216:   29:      if (game_get_square(g, i, j) != S_ONE) {
    #####:   30:        game_delete(g);
    #####:   31:        return 1;
        -:   32:      }
        -:   33:    }
        -:   34:  }
        6:   35:  return 0;
        -:   36:}
        -:   37:
        6:   38:int test_game_redo() {
        6:   39:  game g = game_new_empty_ext(4, 4, false, true);
        6:   40:  game g2 = game_copy(g);
        6:   41:  game_play_move(g, 0, 0, S_ZERO);
        6:   42:  game_play_move(g2, 0, 0, S_ZERO);
        6:   43:  game_undo(g);
        6:   44:  game_redo(g);
        6:   45:  if (game_equal(g, g2) == false) {
    #####:   46:    game_delete(g);
    #####:   47:    game_delete(g2);
    #####:   48:    return 1;
        -:   49:  }
        6:   50:  game_delete(g);
        6:   51:  game_delete(g2);
        6:   52:  return 0;
        -:   53:}
        -:   54:
        -:   55:/*Test function game_new_ext*/
        6:   56:int test_game_new_ext() {
        6:   57:  square squares[24] = {
        -:   58:      S_ONE, S_EMPTY, S_EMPTY, S_EMPTY, S_EMPTY, S_EMPTY, S_ZERO, S_EMPTY,
        -:   59:      S_ONE, S_EMPTY, S_EMPTY, S_EMPTY, S_EMPTY, S_EMPTY, S_ZERO, S_EMPTY,
        -:   60:      S_ONE, S_EMPTY, S_EMPTY, S_EMPTY, S_EMPTY, S_EMPTY, S_ZERO, S_EMPTY,
        -:   61:  };
        6:   62:  int nb_rows = 4;
        6:   63:  int nb_cols = 6;
        6:   64:  game g = game_new_ext(nb_rows, nb_cols, squares, true, true);
        -:   65:
        6:   66:  if (game_is_wrapping(g) != true || game_is_unique(g) != true ||
        6:   67:      game_nb_rows(g) != nb_rows || game_nb_cols(g) != nb_cols) {
    #####:   68:    game_delete(g);
    #####:   69:    return 1;
        -:   70:  }
       30:   71:  for (int i = 0; i < 4; i++) {
      168:   72:    for (int j = 0; j < 6; j++) {
      144:   73:      if (game_get_square(g, i, j) != squares[i * 6 + j]) {
    #####:   74:        game_delete(g);
    #####:   75:        return 1;
        -:   76:      }
        -:   77:    }
        -:   78:  }
        6:   79:  game_delete(g);
        6:   80:  return 0;
        -:   81:}
        -:   82:
        -:   83:/*Test function game_new_empty_ext*/
        6:   84:int test_game_new_empty_ext() {
        6:   85:  game g = game_new_empty_ext(6, 4, true, true);
        6:   86:  if (game_nb_rows(g) != 6 || game_nb_cols(g) != 4 ||
        6:   87:      game_is_wrapping(g) != true || game_is_unique(g) != true) {
    #####:   88:    game_delete(g);
    #####:   89:    return 1;
        -:   90:  }
        -:   91:
       42:   92:  for (int i = 0; i < 6; i++) {
      180:   93:    for (int j = 0; j < 4; j++) {
      144:   94:      if (game_get_square(g, i, j) != S_EMPTY) {
    #####:   95:        game_delete(g);
    #####:   96:        return 1;
        -:   97:      }
        -:   98:    }
        -:   99:  }
        6:  100:  return 0;
        -:  101:}
        -:  102:
        -:  103:/*Test function game_new Empty*/
        6:  104:int test_game_new_empty() {
        6:  105:  game g = game_new_empty();
       42:  106:  for (int i = 0; i < DEFAULT_SIZE; i++) {
      252:  107:    for (int j = 0; j < DEFAULT_SIZE; j++) {
      216:  108:      if (game_get_square(g, i, j) != S_EMPTY) {
    #####:  109:        game_delete(g);
    #####:  110:        return 1;
        -:  111:      }
        -:  112:    }
        -:  113:  }
        6:  114:  game_delete(g);
        6:  115:  return 0;
        -:  116:}
        -:  117:
        -:  118:/*Test function game_is_wrapping*/
        6:  119:int test_game_is_wrapping() {
        6:  120:  game g = game_new_empty();
        6:  121:  game g2 = game_new_empty_ext(6, 6, true, true);
        6:  122:  if (game_is_wrapping(g) != false || game_is_wrapping(g2) != true) {
    #####:  123:    game_delete(g);
    #####:  124:    game_delete(g2);
    #####:  125:    return 1;
        -:  126:  }
        6:  127:  game_delete(g);
        6:  128:  game_delete(g2);
        6:  129:  return 0;
        -:  130:}
        -:  131:
        -:  132:/*Test function game_is_unique*/
        6:  133:int test_game_is_unique() {
        6:  134:  game g = game_new_empty();
        6:  135:  game g2 = game_new_empty_ext(6, 6, true, true);
        6:  136:  if (game_is_unique(g) != false || game_is_unique(g2) != true) {
    #####:  137:    game_delete(g);
    #####:  138:    game_delete(g2);
    #####:  139:    return 1;
        -:  140:  }
        6:  141:  game_delete(g);
        6:  142:  game_delete(g2);
        6:  143:  return 0;
        -:  144:}
        -:  145:
        6:  146:int test_game_nb_cols() {
        6:  147:  game g = game_new_empty();
        6:  148:  game g2 = game_new_empty_ext(8, 10, true, true);
        6:  149:  if (game_nb_cols(g) != 6 || game_nb_cols(g2) != 10) {
    #####:  150:    game_delete(g);
    #####:  151:    game_delete(g2);
    #####:  152:    return 1;
        -:  153:  }
        6:  154:  game_delete(g);
        6:  155:  game_delete(g2);
        6:  156:  return 0;
        -:  157:}
        -:  158:
        6:  159:int test_game_nb_rows() {
        6:  160:  game g = game_new_empty();
        6:  161:  game g2 = game_new_empty_ext(8, 10, true, true);
        6:  162:  if (game_nb_rows(g) != 6 || game_nb_rows(g2) != 8) {
    #####:  163:    game_delete(g);
    #####:  164:    game_delete(g2);
    #####:  165:    return 1;
        -:  166:  }
        6:  167:  game_delete(g);
        6:  168:  game_delete(g2);
        6:  169:  return 0;
        -:  170:}
        -:  171:
        -:  172:/*Test function game_copy*/
        6:  173:int test_game_copy() {
        6:  174:  game g1 = game_default();
        6:  175:  game g2 = game_copy(g1);
       42:  176:  for (int i = 0; i < DEFAULT_SIZE; i++) {
      252:  177:    for (int j = 0; j < DEFAULT_SIZE; j++) {
      216:  178:      if (game_get_square(g1, i, j) != game_get_square(g2, i, j)) {
    #####:  179:        game_delete(g1);
    #####:  180:        game_delete(g2);
    #####:  181:        return 1;
        -:  182:      }
        -:  183:    }
        -:  184:  }
        6:  185:  game_delete(g1);
        6:  186:  game_delete(g2);
        6:  187:  game g3 = game_new_empty_ext(4, 6, true, true);
        6:  188:  game g4 = game_copy(g3);
       12:  189:  if (game_is_wrapping(g4) != true || game_is_unique(g4) != true ||
       12:  190:      game_nb_rows(g4) != 4 || game_nb_cols(g4) != 6) {
    #####:  191:    return 1;
        -:  192:  }
       30:  193:  for (int i = 0; i < game_nb_rows(g3); i++) {
      168:  194:    for (int j = 0; j < game_nb_cols(g3); j++) {
      144:  195:      if (game_get_square(g3, i, j) != game_get_square(g4, i, j)) {
    #####:  196:        return 1;
        -:  197:      }
        -:  198:    }
        -:  199:  }
        6:  200:  game_delete(g3);
        6:  201:  game_delete(g4);
        6:  202:  return 0;
        -:  203:}
        -:  204:
        -:  205:/*Test function game_equal*/
        6:  206:int test_game_equal() {
        6:  207:  game g1 = game_new_empty();
        -:  208:  square *squares =
        6:  209:      (square *)malloc((DEFAULT_SIZE * DEFAULT_SIZE) * sizeof(square));
        -:  210:  square *squares2 =
        6:  211:      (square *)malloc((DEFAULT_SIZE * DEFAULT_SIZE) * sizeof(square));
      222:  212:  for (int i = 0; i < (DEFAULT_SIZE * DEFAULT_SIZE); i++) {
      216:  213:    squares[i] = S_IMMUTABLE_ONE;
      216:  214:    squares2[i] = S_ONE;
        -:  215:  }
        6:  216:  game g3 = game_new(squares2);
        6:  217:  game g2 = game_new(squares);
        6:  218:  free(squares);
        6:  219:  free(squares2);
       12:  220:  if (game_equal(g1, g2) == true || game_equal(g2, g3) == true ||
       12:  221:      game_equal(g1, g3) == true || game_equal(g1, g1) != true) {
    #####:  222:    game_delete(g1);
    #####:  223:    game_delete(g2);
    #####:  224:    game_delete(g3);
    #####:  225:    return 1;
        -:  226:  }
        6:  227:  game_delete(g1);
        6:  228:  game_delete(g2);
        6:  229:  game_delete(g3);
        6:  230:  return 0;
        -:  231:}
        -:  232:
        -:  233:/*Test function game_delete*/
        6:  234:int test_game_delete() {
        6:  235:  game g = game_default();
       6*:  236:  assert(g);
        6:  237:  game_delete(g);
       6*:  238:  assert(g != NULL);
        6:  239:  return 0;
        -:  240:}
        -:  241:
        -:  242:/*Test function game_set_square*/
        6:  243:int test_game_set_square() {
        6:  244:  game g = game_new_empty();
       42:  245:  for (int i = 0; i < DEFAULT_SIZE; i++) {
       36:  246:    game_set_square(g, i, 0, S_IMMUTABLE_ONE);
       36:  247:    game_set_square(g, i, 1, S_ONE);
       72:  248:    if (game_get_square(g, i, 0) != S_IMMUTABLE_ONE ||
       36:  249:        game_get_square(g, i, 1) != S_ONE) {
    #####:  250:      game_delete(g);
    #####:  251:      return 1;
        -:  252:    }
        -:  253:  }
        -:  254:
        6:  255:  game_delete(g);
        6:  256:  return 0;
        -:  257:}
        -:  258:
        -:  259:/*Test function game_get_square*/
        6:  260:int test_game_get_square() {
        6:  261:  game g = game_new_empty();
        6:  262:  game_set_square(g, 0, 1, S_ONE);
        6:  263:  game_set_square(g, 0, 2, S_IMMUTABLE_ONE);
        6:  264:  game_set_square(g, 1, 0, S_ZERO);
        6:  265:  game_set_square(g, 1, 1, S_IMMUTABLE_ZERO);
       12:  266:  if (game_get_square(g, 0, 0) != S_EMPTY ||
       12:  267:      game_get_square(g, 0, 1) != S_ONE ||
       12:  268:      game_get_square(g, 0, 2) != S_IMMUTABLE_ONE ||
       12:  269:      game_get_square(g, 1, 0) != S_ZERO ||
        6:  270:      game_get_square(g, 1, 1) != S_IMMUTABLE_ZERO) {
    #####:  271:    game_delete(g);
    #####:  272:    return 1;
        -:  273:  }
        6:  274:  game_delete(g);
        6:  275:  return 0;
        -:  276:}
        -:  277:
        -:  278:/*Test Dummy*/
        6:  279:int test_dummy() { return EXIT_SUCCESS; }
        -:  280:
        -:  281:/*Main function*/
       90:  282:int main(int argc, char *argv[]) {
       90:  283:  if (argc == 1) {
    #####:  284:    usage(argc, argv);
        -:  285:  }
        -:  286:
       90:  287:  if (strcmp("dummy", argv[1]) == 0) {
        6:  288:    return test_dummy();
       84:  289:  } else if (strcmp("new_game_empty", argv[1]) == 0) {
        6:  290:    return test_game_new_empty();
       78:  291:  } else if (strcmp("game_delete", argv[1]) == 0) {
        6:  292:    return test_game_delete();
       72:  293:  } else if (strcmp("game_equal", argv[1]) == 0) {
        6:  294:    return test_game_equal();
       66:  295:  } else if (strcmp("game_copy", argv[1]) == 0) {
        6:  296:    return test_game_copy();
       60:  297:  } else if (strcmp("game_set_square", argv[1]) == 0) {
        6:  298:    return test_game_set_square();
       54:  299:  } else if (strcmp("game_get_square", argv[1]) == 0) {
        6:  300:    return test_game_get_square();
       48:  301:  } else if (strcmp("game_new", argv[1]) == 0) {
        6:  302:    return test_game_new();
       42:  303:  } else if (strcmp("game_is_wrapping", argv[1]) == 0) {
        6:  304:    return test_game_is_wrapping();
       36:  305:  } else if (strcmp("game_is_unique", argv[1]) == 0) {
        6:  306:    return test_game_is_unique();
       30:  307:  } else if (strcmp("game_new_empty_ext", argv[1]) == 0) {
        6:  308:    return test_game_new_empty_ext();
       24:  309:  } else if (strcmp("game_new_ext", argv[1]) == 0) {
        6:  310:    return test_game_new_ext();
       18:  311:  } else if (strcmp("game_nb_rows", argv[1]) == 0) {
        6:  312:    return test_game_nb_rows();
       12:  313:  } else if (strcmp("game_nb_cols", argv[1]) == 0) {
        6:  314:    return test_game_nb_cols();
        6:  315:  } else if (strcmp("game_redo", argv[1]) == 0) {
        6:  316:    return test_game_redo();
        -:  317:  } else {
    #####:  318:    exit(EXIT_FAILURE);
        -:  319:  }
        -:  320:}
