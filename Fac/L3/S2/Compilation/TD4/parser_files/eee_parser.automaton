State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On LPAR shift to state 1
-- On INT shift to state 2
-- On EOF shift to state 13
-- On main shift to state 14
-- On expr shift to state 15
## Reductions:

State 1:
## Known stack suffix:
## LPAR
## LR(1) items:
expr -> LPAR . expr RPAR [ SUB RPAR MUL EOF DIV ADD ]
## Transitions:
-- On LPAR shift to state 1
-- On INT shift to state 2
-- On expr shift to state 3
## Reductions:

State 2:
## Known stack suffix:
## INT
## LR(1) items:
expr -> INT . [ SUB RPAR MUL EOF DIV ADD ]
## Transitions:
## Reductions:
-- On SUB RPAR MUL EOF DIV ADD
--   reduce production expr -> INT

State 3:
## Known stack suffix:
## LPAR expr
## LR(1) items:
expr -> expr . ADD expr [ SUB RPAR MUL DIV ADD ]
expr -> expr . SUB expr [ SUB RPAR MUL DIV ADD ]
expr -> expr . MUL expr [ SUB RPAR MUL DIV ADD ]
expr -> expr . DIV expr [ SUB RPAR MUL DIV ADD ]
expr -> LPAR expr . RPAR [ SUB RPAR MUL EOF DIV ADD ]
## Transitions:
-- On SUB shift to state 4
-- On RPAR shift to state 10
-- On MUL shift to state 6
-- On DIV shift to state 8
-- On ADD shift to state 11
## Reductions:

State 4:
## Known stack suffix:
## expr SUB
## LR(1) items:
expr -> expr SUB . expr [ SUB RPAR MUL EOF DIV ADD ]
## Transitions:
-- On LPAR shift to state 1
-- On INT shift to state 2
-- On expr shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## expr SUB expr
## LR(1) items:
expr -> expr . ADD expr [ SUB RPAR MUL EOF DIV ADD ]
expr -> expr . SUB expr [ SUB RPAR MUL EOF DIV ADD ]
expr -> expr SUB expr . [ SUB RPAR MUL EOF DIV ADD ]
expr -> expr . MUL expr [ SUB RPAR MUL EOF DIV ADD ]
expr -> expr . DIV expr [ SUB RPAR MUL EOF DIV ADD ]
## Transitions:
-- On MUL shift to state 6
-- On DIV shift to state 8
## Reductions:
-- On SUB RPAR EOF ADD
--   reduce production expr -> expr SUB expr

State 6:
## Known stack suffix:
## expr MUL
## LR(1) items:
expr -> expr MUL . expr [ SUB RPAR MUL EOF DIV ADD ]
## Transitions:
-- On LPAR shift to state 1
-- On INT shift to state 2
-- On expr shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## expr MUL expr
## LR(1) items:
expr -> expr . ADD expr [ SUB RPAR MUL EOF DIV ADD ]
expr -> expr . SUB expr [ SUB RPAR MUL EOF DIV ADD ]
expr -> expr . MUL expr [ SUB RPAR MUL EOF DIV ADD ]
expr -> expr MUL expr . [ SUB RPAR MUL EOF DIV ADD ]
expr -> expr . DIV expr [ SUB RPAR MUL EOF DIV ADD ]
## Transitions:
## Reductions:
-- On SUB RPAR MUL EOF DIV ADD
--   reduce production expr -> expr MUL expr

State 8:
## Known stack suffix:
## expr DIV
## LR(1) items:
expr -> expr DIV . expr [ SUB RPAR MUL EOF DIV ADD ]
## Transitions:
-- On LPAR shift to state 1
-- On INT shift to state 2
-- On expr shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## expr DIV expr
## LR(1) items:
expr -> expr . ADD expr [ SUB RPAR MUL EOF DIV ADD ]
expr -> expr . SUB expr [ SUB RPAR MUL EOF DIV ADD ]
expr -> expr . MUL expr [ SUB RPAR MUL EOF DIV ADD ]
expr -> expr . DIV expr [ SUB RPAR MUL EOF DIV ADD ]
expr -> expr DIV expr . [ SUB RPAR MUL EOF DIV ADD ]
## Transitions:
## Reductions:
-- On SUB RPAR MUL EOF DIV ADD
--   reduce production expr -> expr DIV expr

State 10:
## Known stack suffix:
## LPAR expr RPAR
## LR(1) items:
expr -> LPAR expr RPAR . [ SUB RPAR MUL EOF DIV ADD ]
## Transitions:
## Reductions:
-- On SUB RPAR MUL EOF DIV ADD
--   reduce production expr -> LPAR expr RPAR

State 11:
## Known stack suffix:
## expr ADD
## LR(1) items:
expr -> expr ADD . expr [ SUB RPAR MUL EOF DIV ADD ]
## Transitions:
-- On LPAR shift to state 1
-- On INT shift to state 2
-- On expr shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## expr ADD expr
## LR(1) items:
expr -> expr . ADD expr [ SUB RPAR MUL EOF DIV ADD ]
expr -> expr ADD expr . [ SUB RPAR MUL EOF DIV ADD ]
expr -> expr . SUB expr [ SUB RPAR MUL EOF DIV ADD ]
expr -> expr . MUL expr [ SUB RPAR MUL EOF DIV ADD ]
expr -> expr . DIV expr [ SUB RPAR MUL EOF DIV ADD ]
## Transitions:
-- On MUL shift to state 6
-- On DIV shift to state 8
## Reductions:
-- On SUB RPAR EOF ADD
--   reduce production expr -> expr ADD expr

State 13:
## Known stack suffix:
## EOF
## LR(1) items:
main -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> EOF

State 14:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

State 15:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . ADD expr [ SUB MUL EOF DIV ADD ]
expr -> expr . SUB expr [ SUB MUL EOF DIV ADD ]
expr -> expr . MUL expr [ SUB MUL EOF DIV ADD ]
expr -> expr . DIV expr [ SUB MUL EOF DIV ADD ]
main -> expr . EOF [ # ]
## Transitions:
-- On SUB shift to state 4
-- On MUL shift to state 6
-- On EOF shift to state 16
-- On DIV shift to state 8
-- On ADD shift to state 11
## Reductions:

State 16:
## Known stack suffix:
## expr EOF
## LR(1) items:
main -> expr EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> expr EOF

