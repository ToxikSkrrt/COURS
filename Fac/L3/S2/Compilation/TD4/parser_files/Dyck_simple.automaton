State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On EOF shift to state 1
-- On A shift to state 2
-- On word shift to state 7
-- On main shift to state 9
## Reductions:

State 1:
## Known stack suffix:
## EOF
## LR(1) items:
main -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> EOF

State 2:
## Known stack suffix:
## A
## LR(1) items:
word -> A . word B [ EOF B A ]
word -> A . B [ EOF B A ]
## Transitions:
-- On B shift to state 3
-- On A shift to state 2
-- On word shift to state 4
## Reductions:

State 3:
## Known stack suffix:
## A B
## LR(1) items:
word -> A B . [ EOF B A ]
## Transitions:
## Reductions:
-- On EOF B A
--   reduce production word -> A B

State 4:
## Known stack suffix:
## A word
## LR(1) items:
word -> word . word [ B A ]
word -> A word . B [ EOF B A ]
## Transitions:
-- On B shift to state 5
-- On A shift to state 2
-- On word shift to state 6
## Reductions:

State 5:
## Known stack suffix:
## A word B
## LR(1) items:
word -> A word B . [ EOF B A ]
## Transitions:
## Reductions:
-- On EOF B A
--   reduce production word -> A word B

State 6:
## Known stack suffix:
## word word
## LR(1) items:
word -> word . word [ EOF B A ]
word -> word word . [ EOF B A ]
## Transitions:
-- On A shift to state 2
-- On word shift to state 6
## Reductions:
-- On EOF B A
--   reduce production word -> word word
** Conflict on A

State 7:
## Known stack suffix:
## word
## LR(1) items:
main -> word . EOF [ # ]
word -> word . word [ EOF A ]
## Transitions:
-- On EOF shift to state 8
-- On A shift to state 2
-- On word shift to state 6
## Reductions:

State 8:
## Known stack suffix:
## word EOF
## LR(1) items:
main -> word EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> word EOF

State 9:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

