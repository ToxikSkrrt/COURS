State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On EOF shift to state 1
-- On A shift to state 2
-- On s shift to state 5
-- On main shift to state 7
## Reductions:
-- On EOF
--   reduce production s ->
** Conflict on EOF

State 1:
## Known stack suffix:
## EOF
## LR(1) items:
main -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> EOF

State 2:
## Known stack suffix:
## A
## LR(1) items:
s -> A . s B [ EOF B ]
## Transitions:
-- On A shift to state 2
-- On s shift to state 3
## Reductions:
-- On B
--   reduce production s ->

State 3:
## Known stack suffix:
## A s
## LR(1) items:
s -> A s . B [ EOF B ]
## Transitions:
-- On B shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## A s B
## LR(1) items:
s -> A s B . [ EOF B ]
## Transitions:
## Reductions:
-- On EOF B
--   reduce production s -> A s B

State 5:
## Known stack suffix:
## s
## LR(1) items:
main -> s . EOF [ # ]
## Transitions:
-- On EOF shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## s EOF
## LR(1) items:
main -> s EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> s EOF

State 7:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

