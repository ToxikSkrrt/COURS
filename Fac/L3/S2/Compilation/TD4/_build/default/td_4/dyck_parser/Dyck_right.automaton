State 0:
## Known stack suffix:
##
## LR(1) items:
main' -> . main [ # ]
## Transitions:
-- On EOF shift to state 1
-- On A shift to state 2
-- On word shift to state 4
-- On seq shift to state 8
-- On main shift to state 10
## Reductions:

State 1:
## Known stack suffix:
## EOF
## LR(1) items:
main -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> EOF

State 2:
## Known stack suffix:
## A
## LR(1) items:
word -> A . seq B [ EOF B A ]
word -> A . B [ EOF B A ]
## Transitions:
-- On B shift to state 3
-- On A shift to state 2
-- On word shift to state 4
-- On seq shift to state 6
## Reductions:

State 3:
## Known stack suffix:
## A B
## LR(1) items:
word -> A B . [ EOF B A ]
## Transitions:
## Reductions:
-- On EOF B A
--   reduce production word -> A B

State 4:
## Known stack suffix:
## word
## LR(1) items:
seq -> word . seq [ EOF B ]
seq -> word . [ EOF B ]
## Transitions:
-- On A shift to state 2
-- On word shift to state 4
-- On seq shift to state 5
## Reductions:
-- On EOF B
--   reduce production seq -> word

State 5:
## Known stack suffix:
## word seq
## LR(1) items:
seq -> word seq . [ EOF B ]
## Transitions:
## Reductions:
-- On EOF B
--   reduce production seq -> word seq

State 6:
## Known stack suffix:
## A seq
## LR(1) items:
word -> A seq . B [ EOF B A ]
## Transitions:
-- On B shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## A seq B
## LR(1) items:
word -> A seq B . [ EOF B A ]
## Transitions:
## Reductions:
-- On EOF B A
--   reduce production word -> A seq B

State 8:
## Known stack suffix:
## seq
## LR(1) items:
main -> seq . EOF [ # ]
## Transitions:
-- On EOF shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## seq EOF
## LR(1) items:
main -> seq EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production main -> seq EOF

State 10:
## Known stack suffix:
## main
## LR(1) items:
main' -> main . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept main

